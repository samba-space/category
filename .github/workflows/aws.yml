name: Deploy to Amazon ECS with CodeGuru Analysis

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-northeast-2 # 배포용 리전
  CODEGURU_REGION: us-east-1 # CodeGuru용 리전
  ECR_REPOSITORY: anysinsa/category
  ECS_SERVICE: category-service
  ECS_CLUSTER: PrdAnysinsaCluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: category-container

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  analyze:
    name: Analyze with CodeGuru
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CODEGURU_REGION }}

    - name: CodeGuru Security
      uses: aws-actions/codeguru-security@v1
      with:
        source_path: .
        aws_region: ${{ env.CODEGURU_REGION }}
        fail_on_severity: Critical

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: codeguru-security-results.sarif.json

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: analyze
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Gradle
      run: ./gradlew build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        codedeploy-appspec: appspec.yml

    - name: Configure AWS credentials for CodeGuru
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CODEGURU_REGION }}

    - name: CodeGuru Reviewer
      uses: aws-actions/codeguru-reviewer@v1
      with:
        build_path: .
        s3_bucket: ${{ secrets.AWS_CODEGURU_REVIEWER_S3_BUCKET }}

    - name: Upload review results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: codeguru-results.sarif.json
